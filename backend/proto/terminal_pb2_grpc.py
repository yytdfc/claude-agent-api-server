# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from backend.proto import terminal_pb2 as backend_dot_proto_dot_terminal__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in backend/proto/terminal_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TerminalStub(object):
    """Terminal service with bidirectional streaming
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Stream = channel.stream_stream(
                '/terminal.Terminal/Stream',
                request_serializer=backend_dot_proto_dot_terminal__pb2.TerminalRequest.SerializeToString,
                response_deserializer=backend_dot_proto_dot_terminal__pb2.TerminalResponse.FromString,
                _registered_method=True)
        self.CreateSession = channel.unary_unary(
                '/terminal.Terminal/CreateSession',
                request_serializer=backend_dot_proto_dot_terminal__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=backend_dot_proto_dot_terminal__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.CloseSession = channel.unary_unary(
                '/terminal.Terminal/CloseSession',
                request_serializer=backend_dot_proto_dot_terminal__pb2.CloseSessionRequest.SerializeToString,
                response_deserializer=backend_dot_proto_dot_terminal__pb2.CloseSessionResponse.FromString,
                _registered_method=True)
        self.ResizeTerminal = channel.unary_unary(
                '/terminal.Terminal/ResizeTerminal',
                request_serializer=backend_dot_proto_dot_terminal__pb2.ResizeRequest.SerializeToString,
                response_deserializer=backend_dot_proto_dot_terminal__pb2.ResizeResponse.FromString,
                _registered_method=True)


class TerminalServicer(object):
    """Terminal service with bidirectional streaming
    """

    def Stream(self, request_iterator, context):
        """Bidirectional stream for terminal I/O
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Create a new terminal session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSession(self, request, context):
        """Close a terminal session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResizeTerminal(self, request, context):
        """Resize terminal
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TerminalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Stream': grpc.stream_stream_rpc_method_handler(
                    servicer.Stream,
                    request_deserializer=backend_dot_proto_dot_terminal__pb2.TerminalRequest.FromString,
                    response_serializer=backend_dot_proto_dot_terminal__pb2.TerminalResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=backend_dot_proto_dot_terminal__pb2.CreateSessionRequest.FromString,
                    response_serializer=backend_dot_proto_dot_terminal__pb2.CreateSessionResponse.SerializeToString,
            ),
            'CloseSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSession,
                    request_deserializer=backend_dot_proto_dot_terminal__pb2.CloseSessionRequest.FromString,
                    response_serializer=backend_dot_proto_dot_terminal__pb2.CloseSessionResponse.SerializeToString,
            ),
            'ResizeTerminal': grpc.unary_unary_rpc_method_handler(
                    servicer.ResizeTerminal,
                    request_deserializer=backend_dot_proto_dot_terminal__pb2.ResizeRequest.FromString,
                    response_serializer=backend_dot_proto_dot_terminal__pb2.ResizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'terminal.Terminal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('terminal.Terminal', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Terminal(object):
    """Terminal service with bidirectional streaming
    """

    @staticmethod
    def Stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/terminal.Terminal/Stream',
            backend_dot_proto_dot_terminal__pb2.TerminalRequest.SerializeToString,
            backend_dot_proto_dot_terminal__pb2.TerminalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/terminal.Terminal/CreateSession',
            backend_dot_proto_dot_terminal__pb2.CreateSessionRequest.SerializeToString,
            backend_dot_proto_dot_terminal__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/terminal.Terminal/CloseSession',
            backend_dot_proto_dot_terminal__pb2.CloseSessionRequest.SerializeToString,
            backend_dot_proto_dot_terminal__pb2.CloseSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResizeTerminal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/terminal.Terminal/ResizeTerminal',
            backend_dot_proto_dot_terminal__pb2.ResizeRequest.SerializeToString,
            backend_dot_proto_dot_terminal__pb2.ResizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
